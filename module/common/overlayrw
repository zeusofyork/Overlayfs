#!/system/bin/sh

# Function to check overlayfs support
check_overlayfs_support() {
    echo "Checking if the kernel supports overlayfs..."

    # Check if overlayfs module is loaded
    if lsmod | grep -q "^overlay"; then
        echo "overlayfs is supported and loaded as a kernel module."
        return 0
    fi

    # Check if overlayfs is built into the kernel
    if grep -q "overlay" /proc/filesystems; then
        echo "overlayfs is supported and built into the kernel."
        return 0
    fi

    # Check if the overlay module is available to be loaded
    if modinfo overlay &>/dev/null; then
        echo "overlayfs module is available but not currently loaded."
        echo "You can load it using: sudo modprobe overlay"
        return 0
    fi

    # If none of the above, overlayfs is not supported
    echo "overlayfs is not supported on this kernel."
    return 1
}

# Run the overlayfs check
if ! check_overlayfs_support; then
    echo "Overlayfs is not supported. Exiting script."
    exit 1
fi

# Overlay functionality starts here
[ "$1" == "-bind" ] && MODP="/data/overlayfs/$(getprop ro.build.version.incremental)" || MODP="/data/overlayfs"
TMPP="/data/overlayfs/tmp"

if [ -e "$2" ]; then
    mkdir -p "$MODP$2"
    [ "$1" == "-rw" ] && mkdir -p "$TMPP$2"
    setfattr -n trusted.overlay.opaque -v y $MODP$2 2>/dev/null
    chcon "$(ls -nZld "$2" | awk '{print $5}')" "$MODP$2"
    chmod 755 "$MODP$2"
    chown $(ls -nZld "$2" | awk '{print $3":"$4}') "$MODP$2"
    [ "$(grep -cm1 "$2" $TMPP/path)" == 1 ] || echo "$2" >> $TMPP/path
fi

if [ "$1" == "-bind" ]; then
    [ -e "$(cat $TMPP/pathxt)" ] || $TMPP/busybox cp -acf "$2"/* "$MODP$2"
    mount -o bind "$MODP$2" "$2" && echo "Mount bind: $2 done"
elif [ "$1" == "-ro" ]; then
    mount -t overlay kakathic -o "lowerdir=$MODP$2:$2" "$2" && echo "Mount RO: $2 done"
elif [ "$1" == "-rw" ]; then
    mount -t overlay kakathic -o "upperdir=$MODP$2,lowerdir=$2,workdir=$TMPP$2" "$2" && echo "Mount RW: $2 done"
elif [ -z "$1" ] || [ "$1" == "--help" ]; then
    echo "Use: overlayrw [-ro|-rw|-bind] [path_folder]"
    echo
    echo "Instruct: overlayrw -rw /system/app"
    echo
    echo "After running the command, you can edit files in that directory"
else
    echo "Error: Path $1 is not a directory."
    exit 1
fi
